syntax = "proto3";
package protocol_types;

import "scheme_types.proto"; // Must be relative to the "includes" in build.rs

// Convention: Use proto type 'bytes' (vec<u8> in Rust) for serialized data structures
// and string (String in Rust) for the rest

service ThresholdCryptoLibrary {
    // decrypt returns as soons as the decryption protocol is started. It returns only the instance_id of the newly started protocol instance.
    rpc decrypt (DecryptRequest) returns (DecryptResponse);
    // Returns the result of a protocol instance
    rpc get_decrypt_result (GetDecryptResultRequest) returns (GetDecryptResultResponse);
    // Returns the result of a signature instance
    rpc get_signature_result (GetSignatureResultRequest) returns (GetSignatureResultResponse);
    // Returns the result of a coin flip instance
    rpc get_coin_result (GetCoinResultRequest) returns (GetCoinResultResponse);

    rpc get_public_keys_for_encryption (GetPublicKeysForEncryptionRequest) returns (GetPublicKeysForEncryptionResponse);
    
    // this is an alternative way to send shares. used only for testing
    rpc push_decryption_share (PushDecryptionShareRequest) returns (PushDecryptionShareResponse); 
    
    // sign is the endpoint a light client calls to start a signing protocol
    rpc leader_sign (SignRequest) returns (SignResponse);
    
    // leader sign is the endpoint the leader calls to start the signing protocol on the other nodes
    rpc forward_sign_request(LeaderSignRequest) returns (SignResponse);

    // atomic sign is the endpoint which should be called to start a signing protocol after atomic broadcast
    rpc sign(AtomicSignRequest) returns (SignResponse);

    // starts a coin flip protocol
    rpc flip_coin (CoinRequest) returns (CoinResponse);
}

// ---------- Decrypt a ciphertext ----------
message DecryptRequest {
    bytes ciphertext = 1;
    optional string key_id = 2;
}

message DecryptResponse {
    string instance_id = 1;
}

message GetDecryptResultRequest {
    string instance_id = 1;
}

message GetDecryptResultResponse {
    string instance_id = 1;
    bool is_started = 2;
    bool is_finished = 3;
    optional bytes plaintext = 4;
}

// ---------- Get available keys ----------
message PublicKeyEntry {
    string id = 1;
    scheme_types.ThresholdScheme scheme = 2;
    scheme_types.Group group = 3;
    // bool is_default = 3;
    bytes key = 4;
}

message GetPublicKeysForEncryptionRequest {
}

message GetPublicKeysForEncryptionResponse {
    repeated PublicKeyEntry keys = 1;
}

message GetPublicKeysForSignatureRequest {
}

message GetPublicKeysForSignatureResponse {
    repeated PublicKeyEntry keys = 1;
}


//---------- Push decryption share, test only ----------
message PushDecryptionShareRequest {
  string instance_id = 1;
  bytes decryption_share = 2;

}

message PushDecryptionShareResponse {
}

//------------ Signatures ---------------
message SignRequest {
    bytes message = 1;
    bytes label = 2;
    optional string key_id = 3;
    int32 scheme = 4;
    int32 group = 5;
}

message AtomicSignRequest {
    bytes message = 1;
    bytes label = 2;
    optional string key_id = 3;
    int32 scheme = 4;
    int32 group = 5;
}

message LeaderSignRequest {
    bytes message = 1;
    bytes label = 2;
    optional string key_id = 3;
    int32 scheme = 4;
    int32 group = 5;
    uint32 node_id = 6;
}

message SignResponse {
    string instance_id = 1;
}

message GetSignatureResultRequest {
    string instance_id = 1;
}

message GetSignatureResultResponse {
    string instance_id = 1;
    bool is_started = 2;
    bool is_finished = 3;
    optional bytes signature = 4;
}

//------------ Coins ---------------
message CoinRequest {
    bytes name = 1;
    optional string key_id = 2;
    int32 scheme = 3;
    int32 group = 4;
}

message CoinResponse {
    string instance_id = 1;
}

message GetCoinResultRequest {
    string instance_id = 1;
}

message GetCoinResultResponse {
    string instance_id = 1;
    bool is_started = 2;
    bool is_finished = 3;
    optional int32 coin = 4;
}